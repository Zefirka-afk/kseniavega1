import os
import random
from flask import Flask, request
import telebot

# ============ CONFIG ============
TOKEN = "8183205134:AAEJ95MtbBfYQXOej4ZBxb3GRyS1oz56qlY"   # —Ç–≤–æ–π —Ç–æ–∫–µ–Ω
REGISTER_LINK = "http://bit.ly/3WPN2s5"                   # –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞
WEBHOOK_URL = "https://your-app.onrender.com/" + TOKEN    # –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–≤–æ–π Render-–∞–¥—Ä–µ—Å + —Ç–æ–∫–µ–Ω

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ —é–∑–µ—Ä–æ–≤
user_languages = {}  # {chat_id: "ru"|"en"}

# ======= TELEGRAM BOT HANDLERS ========

@bot.message_handler(commands=['start'])
def start_message(message):
    lang = "ru" if (message.from_user.language_code or "").startswith("ru") else "en"
    user_languages[message.chat.id] = lang

    if lang == "ru":
        greet = "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –æ—Ç Daniel Parker!\n\n–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        explain = "–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        btn_signals = "üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"
    else:
        greet = "Hello üëã I am a trading bot from Daniel Parker!\n\nHere is your personal registration link:"
        explain = "Follow the link and register, I'll send you updates automatically!"
        btn_signals = "üìà Get signals"

    ref_link = f"{REGISTER_LINK}?subid={message.chat.id}"
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(btn_signals, callback_data=f"signals_{lang}"))

    bot.send_message(message.chat.id, f"{greet}\n\n<b>{ref_link}</b>\n\n{explain}", reply_markup=markup)

@bot.message_handler(commands=['myid'])
def my_id(message):
    bot.send_message(message.chat.id, f"‚úÖ –¢–≤–æ–π Telegram ID: <b>{message.chat.id}</b>")

# === –°–ò–ì–ù–ê–õ–´ ===
def send_random_signal(chat_id, lang):
    pairs = ["EUR/USD", "GBP/USD", "USD/JPY", "AUD/USD", "CHF/JPY",
             "NZD/USD", "EUR/JPY", "CAD/CHF", "AUD/JPY", "BTC/USD"]
    pair = random.choice(pairs)
    direction = random.choice(["–í–≤–µ—Ä—Ö ‚¨ÜÔ∏è", "–í–Ω–∏–∑ ‚¨áÔ∏è"]) if lang == "ru" else random.choice(["Up ‚¨ÜÔ∏è", "Down ‚¨áÔ∏è"])
    expire = random.choice([1, 3, 5])

    if lang == "ru":
        msg = f"üéØ –°–∏–≥–Ω–∞–ª:\n{pair}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {expire} –º–∏–Ω."
    else:
        msg = f"üéØ Signal:\n{pair}\nDirection: {direction}\nExpiration: {expire} min."

    bot.send_message(chat_id, msg)

@bot.callback_query_handler(func=lambda c: c.data.startswith("signals_"))
def signals_handler(callback):
    lang = callback.data.split("_")[1]
    chat_id = callback.message.chat.id

    if lang == "ru":
        text = "‚è≥ –£ —Ç–µ–±—è –±—É–¥–µ—Ç 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!\n–Ø –ø—Ä–∏—à–ª—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É, –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.\n\n–ì–æ—Ç–æ–≤?"
        btn_ready = "–ì–æ—Ç–æ–≤ ‚úÖ"
    else:
        text = "‚è≥ You will have 30 seconds to prepare!\nI will send currency pair, expiration and direction.\n\nReady?"
        btn_ready = "Ready ‚úÖ"

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(btn_ready, callback_data=f"ready_{lang}"))
    bot.send_message(chat_id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("ready_"))
def ready_handler(callback):
    lang = callback.data.split("_")[1]
    chat_id = callback.message.chat.id
    if lang == "ru":
        bot.send_message(chat_id, "üîç –Ø –≤ –ø–æ–∏—Å–∫–µ —Å–∏–≥–Ω–∞–ª–∞...\n–ü–æ–¥–≥–æ—Ç–æ–≤—å—Å—è, –∑–∞–π–¥–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!")
    else:
        bot.send_message(chat_id, "üîç Searching for signal...\nPrepare and open the platform!")

    send_random_signal(chat_id, lang)


# ======= FLASK API ========

# –í–µ–±—Ö—É–∫ –æ—Ç Telegram -> –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–æ—Ç
@app.route("/" + TOKEN, methods=['POST'])
def telegram_webhook():
    json_str = request.stream.read().decode("UTF-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def webhook_setup():
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    return "‚úÖ Webhook set", 200


# –ü–æ—Å—Ç–±–µ–∫ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏
@app.route("/postback", methods=["GET", "POST"])
def partner_postback():
    event = request.args.get("event")
    subid = request.args.get("subid")      # Telegram ID (–º—ã –ø–æ–¥—Å—Ç–∞–≤–ª—è–ª–∏ –≤ ref link)
    trader_id = request.args.get("trader_id")
    sumdep = request.args.get("sumdep", "0")

    if not subid:
        return "No subid"
    try:
        chat_id = int(subid)
    except:
        return "Invalid subid"

    lang = user_languages.get(chat_id, "en")

    if event == "reg":
        msg = "‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\nID: {tid}" if lang == "ru" else "‚úÖ You registered!\nTrader ID: {tid}"
        bot.send_message(chat_id, msg.format(tid=trader_id))

    elif event == "FTD":
        msg = "üí∞ –ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç ${dep}! –¢—Ä–µ–π–¥–µ—Ä ID: {tid}" if lang == "ru" else \
              "üí∞ First Deposit ${dep}! Trader ID: {tid}"
        bot.send_message(chat_id, msg.format(dep=sumdep, tid=trader_id))
        send_random_signal(chat_id, lang)

    elif event == "dep":
        msg = "‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ ${dep}" if lang == "ru" else "‚ûï Deposit replenished: ${dep}"
        bot.send_message(chat_id, msg.format(dep=sumdep))

    elif event == "wdr":
        msg = "üíµ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥: ${dep}" if lang == "ru" else "üíµ Withdrawal request: ${dep}"
        bot.send_message(chat_id, msg.format(dep=sumdep))

    else:
        msg = "üì¢ –°–æ–±—ã—Ç–∏–µ: {e}, ID: {tid}, —Å—É–º–º–∞: {dep}" if lang == "ru" else \
              "üì¢ Event: {e}, Trader: {tid}, Sum: {dep}"
        bot.send_message(chat_id, msg.format(e=event, tid=trader_id, dep=sumdep))

    return "OK"


# ======= MAIN ========
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)